15. 3 Three Sum

Time O(n^2)

vector<vector<int>> threeSum(vector<int>& nums) {
    vector<vector<int>> ret;
    sort(nums.begin(), nums.end());
    for (int i = 0; i < nums.size(); i++) {
        // no more pairs coming, break early
        if (nums[i] > 0) return ret;
        // avoid duplicates
        if (i > 0 && nums[i] == nums[i - 1]) continue;
        int left = i + 1;
        int right = nums.size() - 1;
        while (left < right) {
            int curr_sum = nums[i] + nums[left] + nums[right];
            if (curr_sum < 0) {
                left++;
            } else if (curr_sum > 0) {
                right--;
            } else {
                ret.push_back({nums[i], nums[left], nums[right]});
                int curr_left = nums[left];
                int curr_right = nums[right];
                while (left < nums.size() && nums[left] == curr_left) left++;
                while (right > i && nums[right] == curr_right) right--;
            }   
        }
    }
    return ret;
}
