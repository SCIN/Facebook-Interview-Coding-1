42. Trapping Rain Water
Two Pointer
O(n)
We use two pointers one from the beginning, one from the end. 
We store left_max and right_max in two variables.
The trapped water depends on the left_max and right_max.
We start from the beginning and the end, if left height is lower, it means the right part won't trap depend on this point.

Update left_max and 
calculate trapped area
move pointer forward.

int trap(vector<int>& height) {
    int left = 0;
    int left_max = 0;
    int right = height.size() - 1;
    int right_max = 0;
    int ret = 0;
    while (left < right) {
        if (height[left] < height[right]) {
            (height[left] >= left_max) ? left_max = height[left] : ret += left_max - height[left];
            left++;
        } else {
            (height[right] >= right_max) ? right_max = height[right] : ret += right_max - height[right];
            right--;
        }
    }
    return ret;
}
