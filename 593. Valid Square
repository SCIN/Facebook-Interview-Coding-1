593. Valid Square

SORT

class Solution {
public:
    double dist(vector<int>& p1, vector<int>& p2) {
        return (p1[0] - p2[0]) * (p1[0] - p2[0]) + (p1[1] - p2[1]) * (p1[1] - p2[1]);
    }
    bool validSquare(vector<int>& p1, vector<int>& p2, vector<int>& p3, vector<int>& p4) {
        vector<vector<int>> points = {p1, p2, p3, p4};
        sort(points.begin(), points.end());
        return ((dist(points[0], points[1]) != 0) && 
               (dist(points[0], points[1]) == dist(points[2], points[3])) && 
               (dist(points[1], points[3]) == dist(points[0], points[2])) &&
               (dist(points[1], points[3]) == dist(points[0], points[1])) &&
               (dist(points[0], points[3]) == dist(points[1], points[2])));
    }
};

// 01[1]. 11[3]

// 00[0]  10[2]

DFS

class Solution {
public:
    double dist(vector<int>& p1, vector<int>& p2) {
        return (p1[0] - p2[0]) * (p1[0] - p2[0]) + (p1[1] - p2[1]) * (p1[1] - p2[1]);
    }
    bool validSquare(vector<int>& p1, vector<int>& p2, vector<int>& p3, vector<int>& p4) {
        return check(p1, p2, p3, p4) || check(p1, p3, p2, p4) || check(p1, p2, p4, p3);
    }
    bool check(vector<int>& p1, vector<int>& p2, vector<int>& p3, vector<int>& p4) {
        return  (dist(p1, p2) != 0) &&
                (dist(p1, p2) == dist(p2, p3)) &&
                (dist(p2, p3) == dist(p3, p4)) && 
                (dist(p1, p4) == dist(p3, p4)) &&
                (dist(p1, p3) == dist(p2, p4));
    }
};

// p2 p3

// p1 p4

