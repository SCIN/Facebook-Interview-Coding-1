935. Knight Dialer

Build the 2D map for possile moves
dp[i][j]: At ith hop, how many accumulated moves ends at key j.
At last, sum all ending at the (N - 1)th hop.

const long long MOD = pow(10, 9) + 7;
int knightDialer(int N) {
    vector<vector<int>> moves = {{4, 6}, {8, 6}, {7, 9}, {8, 4}, {9, 3, 0}, {}, {7, 1, 0}, {2, 6}, {1, 3}, {2, 4}};
    vector<vector<long>> dp(N, vector<long>(10, 0));
    for (int i = 0; i < 10; i++) {
        dp[0][i] = 1;
    }
    for (int i = 1; i < N; i++) {
        for (int j = 0; j < 10; j++) {
            for (int move : moves[j]) {
                dp[i][move] += dp[i - 1][j];
                dp[i][move] %= MOD;
            }
        }
    }
    long ret = 0;
    for (int number : dp[N - 1]) {
        ret += number;
    }
    return int(ret % MOD);
}
